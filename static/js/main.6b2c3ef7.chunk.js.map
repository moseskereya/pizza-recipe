{"version":3,"sources":["Components/PizzaRecipe.js","Nav.js","Components/App1.js","App.js","serviceWorker.js","index.js"],"names":["Pizza","props","state","className","src","this","recipe","image","alt","label","Component","Nav","App1","GetPizza","e","preventDefault","console","log","axios","get","then","Response","setState","recipes","data","hits","catch","error","searchPizza","pizza","target","value","onSubmit","type","name","onChange","map","key","calories","lable","healthLabels","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSAoBeA,E,YAlBX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,GAFE,E,oEAIZD,GACH,OACI,6BACI,0BAAME,UAAU,QAChB,yBAAKC,IAAKC,KAAKJ,MAAMK,OAAOA,OAAOC,MAAOC,IAAI,WAE9C,6BAASL,UAAU,SACnB,2BAAIE,KAAKJ,MAAMK,OAAOA,OAAOG,a,GAZzBC,aCgBLC,E,YAfX,WAAYV,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,GAFE,E,sEAKf,OACI,6BACI,yD,GAREQ,aC6DHE,E,YAzDX,WAAYX,GAAQ,IAAD,8BACf,4CAAMA,KAOPY,SAAW,SAACC,GACRA,EAAEC,iBACFC,QAAQC,IAAI,EAAKf,OAIpBgB,IAAMC,IAAN,0CAHc,QAGd,mBAFe,WAEf,oBADgB,qCAEfC,MAAK,SAAAC,GACFL,QAAQC,IAAII,GACZ,EAAKC,SAAS,CACVC,QAAQF,EAASG,KAAKC,UAG7BC,OAAM,SAAAC,GACHX,QAAQC,IAAIU,OAtBD,EA0BnBC,YAAc,SAACd,GACX,EAAKQ,SAAS,CAAEO,MAAOf,EAAEgB,OAAOC,SAzBhC,EAAK7B,MAAQ,CACTqB,QAAQ,GACRM,MAAM,IAJK,E,sEA+Bf,IAAMA,EAAUxB,KAAKH,MAAM2B,MAC3B,OACI,8BACC,kBAAC,EAAD,MACD,0BAAMG,SAAU3B,KAAKQ,UACjB,2BAAOoB,KAAK,OAAOC,KAAK,QACxBC,SAAU9B,KAAKuB,YACfG,MAAOF,IAAQ,6BACf,4BAAQI,KAAK,UAAb,iBAEF,yBAAK9B,UAAU,SAEXE,KAAKH,MAAMqB,QAAQa,KAAI,SAAA9B,GAAM,OACzB,kBAAC,EAAD,CAAOA,OAAWA,EAClB+B,IAAK/B,EAAOA,OAAOgC,SACnBC,MAAOjC,EAAOG,MACd+B,aAAclC,EAAOA,OAAOkC,wB,GAhD/B9B,a,MCQJ+B,MARf,WACE,OACE,yBAAKtC,UAAU,OACX,kBAAC,EAAD,QCKYuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.6b2c3ef7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass Pizza extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    render(props) {\r\n        return ( \r\n            <div>\r\n                <main className=\"main\">\r\n                <img src={this.props.recipe.recipe.image} alt=\"pizza\"/>  \r\n                </main>\r\n                <article className=\"label\">\r\n                <p>{this.props.recipe.recipe.label}</p>\r\n                </article>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Pizza;","import React, {Component } from 'react';\r\nclass Nav extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <nav>\r\n                    Pizza Recipe | Home\r\n                </nav>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Nav;","import React, { Component } from 'react';\r\nimport axios from \"axios\"\r\nimport Pizza from \"./PizzaRecipe\"\r\nimport Nav from \"../Nav\"\r\nclass App1 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            recipes:[],\r\n            pizza:\"\"\r\n         }\r\n    }\r\n\r\n       GetPizza = (e) =>{\r\n           e.preventDefault()\r\n           console.log(this.state)\r\n        const query = \"pizza\"\r\n        const APP_ID = \"d0021928\";\r\n        const APP_KEY = \"3c5a85a012ba1a0db1c2a1899694b6dc\";\r\n        axios.get(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`)\r\n        .then(Response => {\r\n            console.log(Response)\r\n            this.setState({\r\n                recipes:Response.data.hits\r\n            })\r\n        })\r\n        .catch(error =>{\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    searchPizza = (e) => {\r\n        this.setState({ pizza: e.target.value\r\n        })\r\n    }\r\n    render() { \r\n        const pizza   = this.state.pizza\r\n        return ( \r\n            <main>\r\n             <Nav/>\r\n            <form onSubmit={this.GetPizza}>\r\n                <input type=\"text\" name=\"pizza\" \r\n                onChange={this.searchPizza}\r\n                value={pizza}/><br/>\r\n                <button type=\"submit\">Search pizza</button>\r\n            </form> \r\n              <div className=\"Pizza\">\r\n                {\r\n                  this.state.recipes.map(recipe => (\r\n                      <Pizza recipe  = {recipe}\r\n                      key={recipe.recipe.calories}\r\n                      lable={recipe.label}\r\n                      healthLabels={recipe.recipe.healthLabels}/>\r\n                  ))\r\n                }\r\n              </div>\r\n            </main>\r\n        \r\n         );\r\n    }\r\n}\r\n \r\nexport default App1;","import React from 'react';\nimport App1 from \"./Components/App1\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <App1/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}